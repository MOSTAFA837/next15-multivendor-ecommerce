

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password         String?
  role            Role    @default(USER)
  accounts      Account[]
  stores    Store[]  @relation("UserStores")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Category {
  id            String        @id @default(uuid())
  name          String
  url           String
  featured      Boolean       @default(false)
  subCategories SubCategory[] @relation("CategoryToSubcategory")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  image      String
  url        String
  featured   Boolean   @default(false)
  categoryId String
  category   Category  @relation("CategoryToSubcategory", fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([categoryId])
}

model OfferTag {
  id   String @id @default(uuid())
  name String
  url  String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                     String      @id @default(uuid())
  name                   String
  description            String      @db.Text
  email                  String      @unique
  phone                  String
  url                    String      @unique
  logo                   String
  cover                  String
  status                 StoreStatus @default(PENDING)
  averageRating          Float       @default(0)
  featured               Boolean     @default(false)
  returnPolicy           String?
  defaultShippingService String?
  defaultShippingFees    Float?
  defaultDeliveryTimeMin Int?
  defaultDeliveryTimeMax Int?
  userId                 String
  user                   User        @relation("UserStores", fields: [userId], references: [id])
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @default(now()) @updatedAt

  @@index([userId])
}
