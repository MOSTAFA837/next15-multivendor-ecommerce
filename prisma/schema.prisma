

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password         String?
  role            Role    @default(USER)
  accounts      Account[]
  stores    Store[]  @relation("UserStores")
  following Store[] @relation("UserFollowingStore")
  reviews           Review[]          @relation("ReviewToUser")
  cart Cart? @relation("UserCart")
  shippingAddresses ShippingAddress[] @relation("UserShippingAddresses")
  orders    Order[]  @relation("UserOrders")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Category {
  id            String        @id @default(uuid())
  name          String
  url           String
  featured      Boolean       @default(false)
  subCategories SubCategory[] @relation("CategoryToSubcategory")
  products      Product[]     @relation("CategoryToProduct")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  image      String
  url        String
  featured   Boolean   @default(false)
  categoryId String
  category   Category  @relation("CategoryToSubcategory", fields: [categoryId], references: [id])
  products   Product[] @relation("SubCategoryToProduct")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([categoryId])
}

model OfferTag {
  id        String @id @default(uuid())
  name      String
  url       String
  products  Product[] @relation("OfferTagToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                                  String      @id @default(uuid())
  name                                String
  description                         String      @db.Text
  email                               String      @unique
  phone                               String
  url                                 String      @unique
  logo                                String
  cover                               String
  status                              StoreStatus @default(PENDING)
  averageRating                       Float       @default(0)
  numReviews                          Int       @default(0)
  featured                            Boolean     @default(false)
  returnPolicy                        String     @default("Return in 30 days.")
  defaultShippingService              String     @default("International Delivery")
  defaultShippingFeePerItem           Float      @default(0)
  defaultShippingFeeForAdditionalItem Float      @default(0)
  defaultShippingFeePerKg             Float      @default(0)
  defaultShippingFeeFixed             Float      @default(0)
  defaultDeliveryTimeMin              Int       @default(7)
  defaultDeliveryTimeMax              Int        @default(31)
  followers User[]   @relation("UserFollowingStore")
  cartItems     CartItem[]     @relation("CartItemToStore")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId String
  user   User   @relation("UserStores", fields: [userId], references: [id])

  products      Product[]      @relation("StoreToProduct")
  shippingRates ShippingRate[] @relation("StoreShippingRates")
  orderGroups   OrderGroup[]   @relation("OrderGroupToStore")

  @@index([userId])
}

enum ShippingFeeMethod {
  ITEM
  WIGHT
  FIXED
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String           @db.LongText
  slug          String           @unique
  brand         String
  rating        Float            @default(0)
  storeId       String
  store         Store            @relation("StoreToProduct", fields: [storeId], references: [id])
  variants      ProductVariant[] @relation("ProductToProductVariant")
  categoryId    String
  category      Category         @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subCategoryId String
  subCategory   SubCategory      @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])
  specs         Spec[]           @relation("ProductSpec")
  questions     Question[]       @relation("ProductQuestion")
  offerTagId    String
  offerTag      OfferTag @relation("OfferTagToProduct", fields: [offerTagId], references: [id])
  sales         Int               @default(0)
  numReviews    Int               @default(0)
  views         Int               @default(0)
  shippingFeeMethod ShippingFeeMethod @default(ITEM)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
  reviews       Review[]         @relation("ReviewToProduct")

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([offerTagId])
}

model ProductVariant {
  id                 String                @id @default(uuid())
  variantName        String?
  variantDescription String?               @db.LongText
  variantImage       String?
  slug               String                @unique
  isSale             Boolean               @default(false)
  saleEndDate        String?
  keywords           String
  sku                String
  productId          String
  product            Product               @relation("ProductToProductVariant", fields: [productId], references: [id])
  sizes              Size[]                @relation("ProductVariantSizes")
  images             ProductVariantImage[] @relation("ProductVariantToVariantImage")
  colors             Color[]               @relation("ProductVariantColors")
  specs              Spec[]                @relation("ProductVariantSpec")
  weight             Float?    
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @default(now()) @updatedAt

  @@index([productId])
}

model ProductVariantImage {
  id               String         @id @default(uuid())
  url              String
  alt              String         @default("")
  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantToVariantImage", fields: [productVariantId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@index([productVariantId])
}

model Size {
  id               String         @id @default(uuid())
  size             String
  quantity         Int
  price            Float
  discount         Float          @default(0)
  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantSizes", fields: [productVariantId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@index([productVariantId])
}

model Color {
  id               String         @id @default(uuid())
  name             String
  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantColors", fields: [productVariantId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  @@index([productVariantId])
}

model Spec {
  id        String          @id @default(uuid())
  name      String
  value     String
  productId String?
  product   Product?        @relation("ProductSpec", fields: [productId], references: [id], onDelete: Cascade)
  variantId String?
  variant   ProductVariant? @relation("ProductVariantSpec", fields: [variantId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt

  @@index([productId])
  @@index([variantId])
}

model Question {
  id        String   @id @default(uuid())
  question  String
  answer    String
  productId String
  product   Product  @relation("ProductQuestion", fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Country {
  id        String   @id @default(uuid())
  name      String   @unique
  code      String   @unique
  shippingRates ShippingRate[] @relation("CountryToShippingRates")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingRate {
  id                           String @id @default(uuid())
  shippingService              String
  shippingFeePerItem           Float
  shippingFeeForAdditionalItem Float
  shippingFeePerKg             Float
  shippingFeeFixed             Float
  deliveryTimeMin              Int
  deliveryTimeMax              Int
  returnPolicy                 String
  countryId String
  country   Country @relation("CountryToShippingRates", fields: [countryId], references: [id])
  storeId String
  store   Store  @relation("StoreShippingRates", fields: [storeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([countryId])
  @@index([storeId])
}

model Review {
  id       String @id @default(uuid())
  variant  String
  review   String
  rating   Float
  color    String
  size     String
  likes    Int    @default(0)
  userId String
  user   User   @relation("ReviewToUser", fields: [userId], references: [id])
  productId String
  product   Product @relation("ReviewToProduct", fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([productId])
}

model Cart {
  id String @id @default(uuid())
  userId String @unique
  user  User   @relation("UserCart", fields: [userId], references: [id])
  shippingFees Float
  subTotal Float
  total Float
  items CartItem[] @relation("CartToCartItem")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id          String @id @default(uuid())
  productId   String
  variantId   String
  sizeId      String
  productSlug String
  variantSlug String
  sku         String
  name        String
  image       String
  size        String
  price       Float
  quantity    Int    @default(1)
  shippingFee Float  @default(0)
  totalPrice  Float

  cartId String
  cart   Cart   @relation("CartToCartItem", fields: [cartId], references: [id], onDelete: Cascade)

  storeId String
  store   Store  @relation("CartItemToStore", fields: [storeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
  @@index([storeId])
}

model ShippingAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  phone     String
  address1  String
  address2  String?
  state     String
  city      String
  zip_code  String
  default   Boolean @default(false)
  userId String
  user   User   @relation("UserShippingAddresses", fields: [userId], references: [id])
  orders Order[] @relation("ShippingAddressToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}

enum OrderStatus {
  Pending
  Confirmed
  Processing
  Shipped
  OutforDelivery
  Delivered
  Cancelled
  Failed
  Refunded
  Returned
  PartiallyShipped
  OnHold
}

enum PaymentStatus {
  Pending
  Paid
  Failed
  Declined
  Cancelled
  Refunded
  PartiallyRefunded
  Chargeback
}

enum PaymentMethod {
  Paypal
  Stripe
}

model Order {
  id String @id @default(uuid())
  shippingFees Float
  subTotal     Float
  total        Float
  orderStatus   OrderStatus   @default(Pending)
  paymentStatus PaymentStatus @default(Pending)
  shippingAddressId String
  shippingAddress   ShippingAddress @relation("ShippingAddressToOrder", fields: [shippingAddressId], references: [id])
  userId String
  user   User   @relation("UserOrders", fields: [userId], references: [id])
  groups OrderGroup[] @relation("OrderGroupToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shippingAddressId])
  @@index([userId])
}

model OrderGroup {
  id     String      @id @default(uuid())
  status OrderStatus @default(Pending)
  shippingService     String
  shippingDeliveryMin Int
  shippingDeliveryMax Int
  shippingFees Float
  subTotal     Float
  total        Float
  orderId String
  order   Order  @relation("OrderGroupToOrder", fields: [orderId], references: [id])
  storeId String
  store   Store  @relation("OrderGroupToStore", fields: [storeId], references: [id])
  items OrderItem[] @relation("OrderItemToGroup")

  @@index([orderId])
  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  productId String
  variantId String
  sizeId    String
  productSlug String
  variantSlug String
  sku         String
  name        String
  image       String
  size        String
  quantity    Int    @default(1)
  shippingFee Float  @default(0)
  price       Float
  totalPrice  Float
  orderGroupId String
  orderGroup   OrderGroup @relation("OrderItemToGroup", fields: [orderGroupId], references: [id], onDelete: Cascade)
  status       ProductStatus @default(Pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderGroupId])
}

enum ProductStatus {
  Pending
  Processing
  ReadyForShipment
  Shipped
  Delivered
  Canceled
  Returned
  Refunded
  FailedDelivery
  OnHold
  Backordered
  PartiallyShipped
  ExchangeRequested
  AwaitingPickup
}